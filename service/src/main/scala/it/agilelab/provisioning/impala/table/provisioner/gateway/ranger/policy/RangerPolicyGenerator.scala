package it.agilelab.provisioning.impala.table.provisioner.gateway.ranger.policy

import it.agilelab.provisioning.commons.client.ranger.model.{
  Access,
  PolicyPriority,
  RangerPolicy,
  RangerPolicyItem
}
import it.agilelab.provisioning.impala.table.provisioner.gateway.ranger.RangerResources

object RangerPolicyGenerator {

  private val URL_POLICY_NAME_PATTERN = "%s_%s_url_access_policy"
  private val DB_POLICY_NAME_PATTERN = "%s_access_policy"
  private val TABLE_POLICY_NAME_PATTERN = "%s_%s_access_policy"
  private val IMPALA_SERVICE = "cm_hive"
  private val IMPALA_SERVICE_TYPE = "hive"
  private val DEFAULT_POLICY_LABELS = Seq("autogenerated")

  def impalaDb(
      database: String,
      ownerRole: String,
      userRole: Option[String],
      usersOwners: Seq[String],
      zoneName: String
  ): RangerPolicy =
    RangerPolicy
      .empty(
        IMPALA_SERVICE,
        DB_POLICY_NAME_PATTERN.format(database),
        DB_POLICY_NAME_PATTERN.format(database),
        IMPALA_SERVICE_TYPE,
        DEFAULT_POLICY_LABELS,
        Some(zoneName)
      )
      .copy(
        resources = RangerResources.database(database),
        policyItems = defineDbPolicyItems(ownerRole, usersOwners, userRole),
        policyPriority = PolicyPriority.OVERRIDE
      )

  def impalaTable(
      database: String,
      table: String,
      ownerRole: String,
      userRole: Option[String],
      usersOwners: Seq[String],
      zoneName: String
  ): RangerPolicy =
    RangerPolicy
      .empty(
        IMPALA_SERVICE,
        TABLE_POLICY_NAME_PATTERN.format(database, table),
        TABLE_POLICY_NAME_PATTERN.format(database, table),
        IMPALA_SERVICE_TYPE,
        DEFAULT_POLICY_LABELS,
        Some(zoneName)
      )
      .copy(
        resources = RangerResources.table(database, table),
        policyItems = defineDataPolicyItems(ownerRole, usersOwners, userRole)
      )

  def impalaUrl(
      database: String,
      table: String,
      url: String,
      ownerRole: String,
      userRole: Option[String],
      usersOwners: Seq[String],
      zoneName: String
  ): RangerPolicy =
    RangerPolicy
      .empty(
        IMPALA_SERVICE,
        URL_POLICY_NAME_PATTERN.format(database, table),
        URL_POLICY_NAME_PATTERN.format(database, table),
        IMPALA_SERVICE_TYPE,
        DEFAULT_POLICY_LABELS,
        Some(zoneName)
      )
      .copy(
        resources = RangerResources.url(url),
        policyItems = defineDataPolicyItems(ownerRole, usersOwners, userRole)
      )

  private def defineDataPolicyItems(
      ownerRole: String,
      ownerUsers: Seq[String],
      userRole: Option[String]
  ): Seq[RangerPolicyItem] =
    Seq(
      RangerPolicyItem.ownerLevel(Seq.empty, ownerUsers, List(ownerRole))
    ) ++ userRole.map(userRoleName =>
      RangerPolicyItem.userLevel(Seq.empty, Seq.empty[String], Seq(userRoleName)))

  private def defineDbPolicyItems(
      ownerRole: String,
      ownerUsers: Seq[String],
      userRole: Option[String]
  ): Seq[RangerPolicyItem] =
    Seq(
      RangerPolicyItem.ownerLevel(Seq.empty, ownerUsers, List(ownerRole))
    ) ++ userRole.map(userRoleName =>
      RangerPolicyItem
        .userLevel(Seq.empty, Seq.empty[String], Seq(userRoleName))
        .copy(accesses = Seq(Access.select)))

  def policyWithMergedPolicyItems(
      rangerPolicy: RangerPolicy,
      policyItems: Seq[RangerPolicyItem]
  ): RangerPolicy = {
    val mergedItems = (rangerPolicy.policyItems ++ policyItems).distinct
    rangerPolicy.copy(policyItems = mergedItems)
  }

  def policyWithRemovedRole(
      rangerPolicy: RangerPolicy,
      roleName: String
  ): RangerPolicy =
    rangerPolicy.copy(policyItems = rangerPolicy.policyItems.flatMap { policyItem =>
      val item = policyItem.copy(
        roles = policyItem.roles.filter(!_.equals(roleName))
      )
      if (item.roles.isEmpty && item.roles.isEmpty && item.roles.isEmpty) None
      else Some(item)
    })

}
