package it.agilelab.provisioning.impala.table.provisioner.gateway.ranger.policy

import it.agilelab.provisioning.commons.client.ranger.model.{
  Access,
  PolicyPriority,
  RangerPolicy,
  RangerPolicyItem
}
import it.agilelab.provisioning.impala.table.provisioner.gateway.ranger.RangerResources

object RangerPolicyGenerator {

  private val URL_POLICY_NAME_PATTERN = "%s_%s_url_access_policy"
  private val DB_POLICY_NAME_PATTERN = "%s_access_policy"
  private val TABLE_POLICY_NAME_PATTERN = "%s_%s_access_policy"
  private val IMPALA_SERVICE = "cm_hive"
  private val IMPALA_SERVICE_TYPE = "hive"
  private val DEFAULT_POLICY_LABELS = Seq("autogenerated")

  def impalaDb(
      database: String,
      owners: Seq[String],
      users: Seq[String],
      usersOwners: Seq[String],
      zoneName: String
  ): RangerPolicy =
    RangerPolicy
      .empty(
        IMPALA_SERVICE,
        DB_POLICY_NAME_PATTERN.format(database),
        DB_POLICY_NAME_PATTERN.format(database),
        IMPALA_SERVICE_TYPE,
        DEFAULT_POLICY_LABELS,
        Some(zoneName)
      )
      .copy(
        resources = RangerResources.database(database),
        policyItems = defineDbPolicyItems(owners, usersOwners, users),
        policyPriority = PolicyPriority.OVERRIDE
      )

  def impalaTable(
      database: String,
      table: String,
      owners: Seq[String],
      users: Seq[String],
      usersOwners: Seq[String],
      zoneName: String
  ): RangerPolicy =
    RangerPolicy
      .empty(
        IMPALA_SERVICE,
        TABLE_POLICY_NAME_PATTERN.format(database, table),
        TABLE_POLICY_NAME_PATTERN.format(database, table),
        IMPALA_SERVICE_TYPE,
        DEFAULT_POLICY_LABELS,
        Some(zoneName)
      )
      .copy(
        resources = RangerResources.table(database, table),
        policyItems = defineDataPolicyItems(owners, usersOwners, users)
      )

  def impalaUrl(
      database: String,
      table: String,
      url: String,
      owners: Seq[String],
      users: Seq[String],
      usersOwners: Seq[String],
      zoneName: String
  ): RangerPolicy =
    RangerPolicy
      .empty(
        IMPALA_SERVICE,
        URL_POLICY_NAME_PATTERN.format(database, table),
        URL_POLICY_NAME_PATTERN.format(database, table),
        IMPALA_SERVICE_TYPE,
        DEFAULT_POLICY_LABELS,
        Some(zoneName)
      )
      .copy(
        resources = RangerResources.url(url),
        policyItems = defineDataPolicyItems(owners, usersOwners, users)
      )

  private def defineDataPolicyItems(
      ownerGroups: Seq[String],
      ownerUsers: Seq[String],
      usersGroups: Seq[String]
  ): Seq[RangerPolicyItem] = {
    val ownerItems = nonEmptyExec(
      ownerGroups,
      (s: Seq[String]) => Seq(RangerPolicyItem.ownerLevel(s, ownerUsers))
    )
    val usersItems = nonEmptyExec(
      usersGroups,
      (s: Seq[String]) => Seq(RangerPolicyItem.userLevel(s, Seq.empty[String]))
    )
    ownerItems ++ usersItems
  }

  private def defineDbPolicyItems(
      ownerGroups: Seq[String],
      ownerUsers: Seq[String],
      usersGroups: Seq[String]
  ): Seq[RangerPolicyItem] = {
    val ownerItems = nonEmptyExec(
      ownerGroups,
      (s: Seq[String]) => Seq(RangerPolicyItem.ownerLevel(s, ownerUsers))
    )
    val usersItems = nonEmptyExec(
      usersGroups,
      (s: Seq[String]) =>
        Seq(RangerPolicyItem.userLevel(s, Seq.empty[String]).copy(accesses = Seq(Access.select)))
    )
    ownerItems ++ usersItems
  }

  private def nonEmptyExec[A, B](seq: Seq[A], func: Seq[A] => Seq[B]): Seq[B] =
    if (seq.nonEmpty) func(seq)
    else Seq.empty[B]
}
