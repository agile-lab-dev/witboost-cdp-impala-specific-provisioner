package it.agilelab.provisioning.impala.table.provisioner.gateway.ranger

import it.agilelab.provisioning.commons.client.ranger.RangerClient
import it.agilelab.provisioning.commons.client.ranger.model.{
  Access,
  RangerPolicy,
  RangerPolicyItem
}
import it.agilelab.provisioning.mesh.repository.Repository
import it.agilelab.provisioning.mesh.self.service.lambda.core.model.Role
import it.agilelab.provisioning.impala.table.provisioner.core.model.PolicyAttachment
import it.agilelab.provisioning.impala.table.provisioner.gateway.ranger.policy.RangerPolicyGateway
import org.scalamock.scalatest.MockFactory
import org.scalatest.funsuite.AnyFunSuite

class RangerPolicyGatewayTest extends AnyFunSuite with MockFactory {

  test("attachPolicy call update method") {
    val rangerClient = mock[RangerClient]
    val roleRepository = stub[Repository[Role, String, Unit]]
    val rangerTablePolicyGateway = new RangerPolicyGateway(
      roleRepository,
      rangerClient
    )

    val oldPolicyItems = Seq(
      RangerPolicyItem(
        roles = Seq.empty[String],
        groups = Seq("owner1CdpRole"),
        users = Seq("x"),
        conditions = Seq.empty[String],
        delegateAdmin = false,
        accesses = Seq(
          Access.all
        )
      ),
      RangerPolicyItem(
        roles = Seq.empty[String],
        groups = Seq("user1CdpRole"),
        users = Seq.empty[String],
        conditions = Seq.empty[String],
        delegateAdmin = false,
        accesses = Seq(
          Access.select
        )
      )
    )
    val oldPolicyItemsTbl = Seq(
      RangerPolicyItem(
        roles = Seq.empty[String],
        groups = Seq("owner1CdpRole"),
        users = Seq("x"),
        conditions = Seq.empty[String],
        delegateAdmin = false,
        accesses = Seq(
          Access.all
        )
      ),
      RangerPolicyItem(
        roles = Seq.empty[String],
        groups = Seq("user1CdpRole"),
        users = Seq.empty[String],
        conditions = Seq.empty[String],
        delegateAdmin = false,
        accesses = Seq(
          Access.select,
          Access.read
        )
      )
    )

    val newPolicyItems = Seq(
      RangerPolicyItem(
        roles = Seq.empty[String],
        groups = Seq("owner1CdpRole", "owner2CdpRole"),
        users = Seq("x"),
        conditions = Seq.empty[String],
        delegateAdmin = false,
        accesses = Seq(
          Access.all
        )
      ),
      RangerPolicyItem(
        roles = Seq.empty[String],
        groups = Seq("user1CdpRole"),
        users = Seq.empty[String],
        conditions = Seq.empty[String],
        delegateAdmin = false,
        accesses = Seq(
          Access.select
        )
      )
    )
    val newPolicyItemsTbl = Seq(
      RangerPolicyItem(
        roles = Seq.empty[String],
        groups = Seq("owner1CdpRole", "owner2CdpRole"),
        users = Seq("x"),
        conditions = Seq.empty[String],
        delegateAdmin = false,
        accesses = Seq(
          Access.all
        )
      ),
      RangerPolicyItem(
        roles = Seq.empty[String],
        groups = Seq("user1CdpRole"),
        users = Seq.empty[String],
        conditions = Seq.empty[String],
        delegateAdmin = false,
        accesses = Seq(
          Access.select,
          Access.read
        )
      )
    )

    val dbAccessPolicy = RangerPolicy(
      id = -1,
      service = "cm_hive",
      name = "db_access_policy",
      description = "db_access_policy",
      isAuditEnabled = true,
      isEnabled = true,
      resources = RangerResources.database("db"),
      policyItems = oldPolicyItems,
      serviceType = "hive",
      policyLabels = Seq("autogenerated"),
      isDenyAllElse = true,
      "zzz",
      1
    )

    val tblAccessPolicy = RangerPolicy(
      id = -1,
      service = "cm_hive",
      name = "db_tbl_access_policy",
      description = "db_tbl_access_policy",
      isAuditEnabled = true,
      isEnabled = true,
      resources = RangerResources.table("db", "tbl"),
      policyItems = oldPolicyItemsTbl,
      serviceType = "hive",
      policyLabels = Seq("autogenerated"),
      isDenyAllElse = true,
      "zzz",
      0
    )

    val urlAccessPolicy = RangerPolicy(
      id = -1,
      service = "cm_hive",
      name = "db_tbl_url_access_policy",
      description = "db_tbl_url_access_policy",
      isAuditEnabled = true,
      isEnabled = true,
      resources =
        RangerResources.url("url").updatedWith("url")(v => v.map(_.copy(isRecursive = true))),
      policyItems = oldPolicyItemsTbl,
      serviceType = "hive",
      policyLabels = Seq("autogenerated"),
      isDenyAllElse = true,
      "zzz",
      0
    )

    (roleRepository.findById _)
      .when("owner1")
      .returns(Right(Some(Role("a", "b", "c", "d", "owner1CdpRole", "f"))))

    (roleRepository.findById _)
      .when("owner2")
      .returns(Right(Some(Role("a", "b", "c", "d", "owner2CdpRole", "f"))))

    (roleRepository.findById _)
      .when("user1")
      .returns(Right(Some(Role("a", "b", "c", "d", "user1CdpRole", "f"))))

    (rangerClient.findPolicyByName _)
      .expects("cm_hive", "db_access_policy", Some("zzz"))
      .once()
      .returns(Right(Some(dbAccessPolicy.copy(id = 144))))

    (rangerClient.updatePolicy _)
      .expects(dbAccessPolicy.copy(id = 144, policyItems = newPolicyItems))
      .once()
      .returns(Right(dbAccessPolicy.copy(id = 144, policyItems = newPolicyItems)))

    (rangerClient.findPolicyByName _)
      .expects("cm_hive", "db_tbl_access_policy", Some("zzz"))
      .once()
      .returns(Right(Some(tblAccessPolicy.copy(id = 145))))

    (rangerClient.updatePolicy _)
      .expects(tblAccessPolicy.copy(id = 145, policyItems = newPolicyItemsTbl))
      .once()
      .returns(Right(tblAccessPolicy.copy(id = 145, policyItems = newPolicyItemsTbl)))

    (rangerClient.findPolicyByName _)
      .expects("cm_hive", "db_tbl_url_access_policy", Some("zzz"))
      .once()
      .returns(Right(Some(urlAccessPolicy.copy(id = 146))))

    (rangerClient.updatePolicy _)
      .expects(urlAccessPolicy.copy(id = 146, policyItems = newPolicyItemsTbl))
      .once()
      .returns(Right(urlAccessPolicy.copy(id = 146, policyItems = newPolicyItemsTbl)))

    val actual = rangerTablePolicyGateway.attachPolicy(
      "db",
      "tbl",
      "url",
      Seq("owner1", "owner2"),
      Seq("user1"),
      Seq("x"),
      "zzz"
    )

    val expected = Right(
      Seq(
        PolicyAttachment("144", "db_access_policy"),
        PolicyAttachment("145", "db_tbl_access_policy"),
        PolicyAttachment("146", "db_tbl_url_access_policy")
      )
    )

    assert(actual == expected)
  }

  test("attachPolicy call create method") {
    val rangerClient = mock[RangerClient]
    val roleRepository = stub[Repository[Role, String, Unit]]
    val rangerTablePolicyGateway = new RangerPolicyGateway(
      roleRepository,
      rangerClient
    )

    val dbAccessPolicy = RangerPolicy(
      id = -1,
      service = "cm_hive",
      name = "db_access_policy",
      description = "db_access_policy",
      isAuditEnabled = true,
      isEnabled = true,
      resources = RangerResources.database("db"),
      policyItems = Seq(
        RangerPolicyItem(
          roles = Seq.empty[String],
          groups = Seq("owner1CdpRole", "owner2CdpRole"),
          users = Seq("x"),
          conditions = Seq.empty[String],
          delegateAdmin = false,
          accesses = Seq(
            Access.all
          )
        ),
        RangerPolicyItem(
          roles = Seq.empty[String],
          groups = Seq("user1CdpRole"),
          users = Seq.empty[String],
          conditions = Seq.empty[String],
          delegateAdmin = false,
          accesses = Seq(
            Access.select
          )
        )
      ),
      serviceType = "hive",
      policyLabels = Seq("autogenerated"),
      isDenyAllElse = true,
      "zzz",
      1
    )

    val tblAccessPolicy = RangerPolicy(
      id = -1,
      service = "cm_hive",
      name = "db_tbl_access_policy",
      description = "db_tbl_access_policy",
      isAuditEnabled = true,
      isEnabled = true,
      resources = RangerResources.table("db", "tbl"),
      policyItems = Seq(
        RangerPolicyItem(
          roles = Seq.empty[String],
          groups = Seq("owner1CdpRole", "owner2CdpRole"),
          users = Seq("x"),
          conditions = Seq.empty[String],
          delegateAdmin = false,
          accesses = Seq(
            Access.all
          )
        ),
        RangerPolicyItem(
          roles = Seq.empty[String],
          groups = Seq("user1CdpRole"),
          users = Seq.empty[String],
          conditions = Seq.empty[String],
          delegateAdmin = false,
          accesses = Seq(
            Access.select,
            Access.read
          )
        )
      ),
      serviceType = "hive",
      policyLabels = Seq("autogenerated"),
      isDenyAllElse = true,
      "zzz",
      0
    )

    val urlAccessPolicy = RangerPolicy(
      id = -1,
      service = "cm_hive",
      name = "db_tbl_url_access_policy",
      description = "db_tbl_url_access_policy",
      isAuditEnabled = true,
      isEnabled = true,
      resources =
        RangerResources.url("url").updatedWith("url")(v => v.map(_.copy(isRecursive = true))),
      policyItems = Seq(
        RangerPolicyItem(
          roles = Seq.empty[String],
          groups = Seq("owner1CdpRole", "owner2CdpRole"),
          users = Seq("x"),
          conditions = Seq.empty[String],
          delegateAdmin = false,
          accesses = Seq(
            Access.all
          )
        ),
        RangerPolicyItem(
          roles = Seq.empty[String],
          groups = Seq("user1CdpRole"),
          users = Seq.empty[String],
          conditions = Seq.empty[String],
          delegateAdmin = false,
          accesses = Seq(
            Access.select,
            Access.read
          )
        )
      ),
      serviceType = "hive",
      policyLabels = Seq("autogenerated"),
      isDenyAllElse = true,
      "zzz",
      0
    )

    (roleRepository.findById _)
      .when("owner1")
      .returns(Right(Some(Role("a", "b", "c", "d", "owner1CdpRole", "f"))))

    (roleRepository.findById _)
      .when("owner2")
      .returns(Right(Some(Role("a", "b", "c", "d", "owner2CdpRole", "f"))))

    (roleRepository.findById _)
      .when("user1")
      .returns(Right(Some(Role("a", "b", "c", "d", "user1CdpRole", "f"))))

    (rangerClient.findPolicyByName _)
      .expects("cm_hive", "db_access_policy", Some("zzz"))
      .once()
      .returns(Right(None))

    (rangerClient.createPolicy _)
      .expects(dbAccessPolicy)
      .once()
      .returns(Right(dbAccessPolicy.copy(id = 144)))

    (rangerClient.findPolicyByName _)
      .expects("cm_hive", "db_tbl_access_policy", Some("zzz"))
      .once()
      .returns(Right(None))

    (rangerClient.createPolicy _)
      .expects(tblAccessPolicy)
      .once()
      .returns(Right(tblAccessPolicy.copy(id = 145)))

    (rangerClient.findPolicyByName _)
      .expects("cm_hive", "db_tbl_url_access_policy", Some("zzz"))
      .once()
      .returns(Right(None))

    (rangerClient.createPolicy _)
      .expects(urlAccessPolicy)
      .once()
      .returns(Right(urlAccessPolicy.copy(id = 146)))

    val actual = rangerTablePolicyGateway.attachPolicy(
      "db",
      "tbl",
      "url",
      Seq("owner1", "owner2"),
      Seq("user1"),
      Seq("x"),
      "zzz"
    )

    val expected = Right(
      Seq(
        PolicyAttachment("144", "db_access_policy"),
        PolicyAttachment("145", "db_tbl_access_policy"),
        PolicyAttachment("146", "db_tbl_url_access_policy")
      )
    )

    assert(actual == expected)
  }

  test("detachPolicy call delete method") {
    val rangerClient = mock[RangerClient]
    val roleRepository = stub[Repository[Role, String, Unit]]
    val rangerTablePolicyGateway = new RangerPolicyGateway(
      roleRepository,
      rangerClient
    )

    val pi = Seq(
      RangerPolicyItem(
        roles = Seq.empty[String],
        groups = Seq("owner1CdpRole", "owner2CdpRole"),
        users = Seq("x"),
        conditions = Seq.empty[String],
        delegateAdmin = false,
        accesses = Seq(
          Access.all
        )
      ),
      RangerPolicyItem(
        roles = Seq.empty[String],
        groups = Seq("user1CdpRole"),
        users = Seq.empty[String],
        conditions = Seq.empty[String],
        delegateAdmin = false,
        accesses = Seq(
          Access.select,
          Access.read
        )
      )
    )

    val tblAccessPolicy = RangerPolicy(
      id = 145,
      service = "cm_hive",
      name = "db_tbl_access_policy",
      description = "db_tbl_access_policy",
      isAuditEnabled = true,
      isEnabled = true,
      resources = RangerResources.table("db", "tbl"),
      policyItems = pi,
      serviceType = "hive",
      policyLabels = Seq("autogenerated"),
      isDenyAllElse = true,
      "zzz",
      0
    )

    val urlAccessPolicy = RangerPolicy(
      id = 146,
      service = "cm_hive",
      name = "db_tbl_url_access_policy",
      description = "db_tbl_url_access_policy",
      isAuditEnabled = true,
      isEnabled = true,
      resources =
        RangerResources.url("url").updatedWith("url")(v => v.map(_.copy(isRecursive = true))),
      policyItems = pi,
      serviceType = "hive",
      policyLabels = Seq("autogenerated"),
      isDenyAllElse = true,
      "zzz",
      0
    )
    inSequence(
      (roleRepository.findById _)
        .when("owner1")
        .returns(Right(Some(Role("a", "b", "c", "d", "owner1CdpRole", "f")))),
      (roleRepository.findById _)
        .when("owner2")
        .returns(Right(Some(Role("a", "b", "c", "d", "owner2CdpRole", "f")))),
      (roleRepository.findById _)
        .when("user1")
        .returns(Right(Some(Role("a", "b", "c", "d", "user1CdpRole", "f")))),
      (rangerClient.findPolicyByName _)
        .expects("cm_hive", "db_tbl_access_policy", Some("zzz"))
        .once()
        .returns(Right(Some(tblAccessPolicy))),
      (rangerClient.deletePolicy _)
        .expects(tblAccessPolicy)
        .once()
        .returns(Right()),
      (rangerClient.findPolicyByName _)
        .expects("cm_hive", "db_tbl_url_access_policy", Some("zzz"))
        .once()
        .returns(Right(Some(urlAccessPolicy.copy(id = 146)))),
      (rangerClient.deletePolicy _)
        .expects(urlAccessPolicy.copy(id = 146))
        .once()
        .returns(Right())
    )

    val actual = rangerTablePolicyGateway.detachPolicy(
      "db",
      "tbl",
      "url",
      Seq("owner1", "owner2"),
      Seq("user1"),
      Seq("x"),
      "zzz"
    )

    val expected = Right(
      Seq(
        PolicyAttachment("145", "db_tbl_access_policy"),
        PolicyAttachment("146", "db_tbl_url_access_policy")
      )
    )

    assert(actual == expected)
  }

  test("detachPolicy does not call delete method") {
    val rangerClient = mock[RangerClient]
    val roleRepository = stub[Repository[Role, String, Unit]]
    val rangerTablePolicyGateway = new RangerPolicyGateway(
      roleRepository,
      rangerClient
    )

    val tblAccessPolicy = RangerPolicy(
      id = -1,
      service = "cm_hive",
      name = "db_tbl_access_policy",
      description = "db_tbl_access_policy",
      isAuditEnabled = true,
      isEnabled = true,
      resources = RangerResources.table("db", "tbl"),
      policyItems = Seq(
        RangerPolicyItem(
          roles = Seq.empty[String],
          groups = Seq("owner1CdpRole", "owner2CdpRole"),
          users = Seq("x"),
          conditions = Seq.empty[String],
          delegateAdmin = false,
          accesses = Seq(
            Access.all
          )
        ),
        RangerPolicyItem(
          roles = Seq.empty[String],
          groups = Seq("user1CdpRole"),
          users = Seq.empty[String],
          conditions = Seq.empty[String],
          delegateAdmin = false,
          accesses = Seq(
            Access.select,
            Access.read
          )
        )
      ),
      serviceType = "hive",
      policyLabels = Seq("autogenerated"),
      isDenyAllElse = true,
      "zzz",
      0
    )

    val urlAccessPolicy = RangerPolicy(
      id = -1,
      service = "cm_hive",
      name = "db_tbl_url_access_policy",
      description = "db_tbl_url_access_policy",
      isAuditEnabled = true,
      isEnabled = true,
      resources =
        RangerResources.url("url").updatedWith("url")(v => v.map(_.copy(isRecursive = true))),
      policyItems = Seq(
        RangerPolicyItem(
          roles = Seq.empty[String],
          groups = Seq("owner1CdpRole", "owner2CdpRole"),
          users = Seq("x"),
          conditions = Seq.empty[String],
          delegateAdmin = false,
          accesses = Seq(
            Access.all
          )
        ),
        RangerPolicyItem(
          roles = Seq.empty[String],
          groups = Seq("user1CdpRole"),
          users = Seq.empty[String],
          conditions = Seq.empty[String],
          delegateAdmin = false,
          accesses = Seq(
            Access.select,
            Access.read
          )
        )
      ),
      serviceType = "hive",
      policyLabels = Seq("autogenerated"),
      isDenyAllElse = true,
      "zzz",
      0
    )

    (roleRepository.findById _)
      .when("owner1")
      .returns(Right(Some(Role("a", "b", "c", "d", "owner1CdpRole", "f"))))

    (roleRepository.findById _)
      .when("owner2")
      .returns(Right(Some(Role("a", "b", "c", "d", "owner2CdpRole", "f"))))

    (roleRepository.findById _)
      .when("user1")
      .returns(Right(Some(Role("a", "b", "c", "d", "user1CdpRole", "f"))))

    (rangerClient.findPolicyByName _)
      .expects("cm_hive", "db_tbl_access_policy", Some("zzz"))
      .once()
      .returns(Right(None))

    (rangerClient.findPolicyByName _)
      .expects("cm_hive", "db_tbl_url_access_policy", Some("zzz"))
      .once()
      .returns(Right(None))

    val actual = rangerTablePolicyGateway.detachPolicy(
      "db",
      "tbl",
      "url",
      Seq("owner1", "owner2"),
      Seq("user1"),
      Seq("x"),
      "zzz"
    )

    val expected = Right(
      Seq.empty[PolicyAttachment]
    )

    assert(actual == expected)
  }

}
